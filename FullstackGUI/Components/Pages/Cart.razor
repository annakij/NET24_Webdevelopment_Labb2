@page "/cart"
@rendermode InteractiveServer
@using FullstackGUI.Services
@using FullstackAPI.Models
@inject ProductService ProductService
@inject CustomerService CustomerService
@inject OrderService OrderService

<h1>Shopping Cart</h1>

@if (isCartModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseCartModal">&times;</span>
            <h2>Shopping Cart</h2>

            <div>
                <label for="customer">Select Customer:</label>
                <select id="customer" @bind="selectedCustomerId">
                    <option value="0">-- Choose Customer --</option>
                    @foreach (var customer in customers)
                    {
                        <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                    }
                </select>
            </div>

            <ul class="cart-list">
                @foreach (var item in cartItems)
                {
                    <li>
                        <span>@item.ProductName (x @item.Quantity)</span>
                        <button class="quantity-btn" @onclick="() => DecreaseQuantity(item)">-</button>
                        <button class="quantity-btn" @onclick="() => IncreaseQuantity(item)">+</button>
                        <button class="remove-btn">Remove</button>
                    </li>
                }
            </ul>

            <button class="checkout-btn" @onclick="PlaceOrder" disabled="@(selectedCustomerId == 0 || !cartItems.Any())">
                Place Order
            </button>
        </div>
    </div>
}

@code {

    private class CartItem
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }

    private bool isCartModalOpen = false;
    private List<CartItem> cartItems = new();
    private List<Customer> customers = new();
    private int selectedCustomerId = 0;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
    }

    public void AddToCart(Product product)
    {
        var existingItem = cartItems.FirstOrDefault(p => p.ProductId == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            cartItems.Add(new CartItem
                {
                    ProductId = product.Id,
                    ProductName = product.ProductName,
                    Price = product.Price,
                    Quantity = 1
                });
        }
    }

    private void IncreaseQuantity(CartItem item)
    {
        item.Quantity++;
    }

    private void DecreaseQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
        }
    }

    private async Task PlaceOrder()
    {
        if (selectedCustomerId == 0 || !cartItems.Any())
        {
            return;
        }

        var orderRequest = new OrderRequest
            {
                CustomerId = selectedCustomerId,
                Products = cartItems.Select(p => new OrderProductRequest
                {
                    ProductId = p.ProductId,
                    Quantity = p.Quantity
                }).ToList()
            };

        await OrderService.PlaceOrderAsync(orderRequest);
        cartItems.Clear();
    }

    private void OpenCartModal() => isCartModalOpen = true;
    private void CloseCartModal() => isCartModalOpen = false;
}