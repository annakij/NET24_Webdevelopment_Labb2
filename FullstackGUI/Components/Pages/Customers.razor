@page "/customers"
@rendermode InteractiveServer
@using FullstackGUI.Services
@using FullstackAPI.Models
@using Microsoft.AspNetCore.Components.Forms
@inject CustomerService CustomerService

<PageTitle>Customers</PageTitle>

<h3>Customers</h3>

<div class="d-flex justify-content-between mb-3">
    <div>
        <input @bind="searchQuery" class="form-control" placeholder="Search by email..." />
        <button class="btn btn-primary mt-2" @onclick="SearchCustomerByEmail">Search</button>
    </div>

    <div>
        <button class="btn btn-success mt-2" @onclick="OpenAddCustomerModal">Register new customer</button>
    </div>
</div>

@if (customers == null)
{
    <p>Loading customers...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Adress</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>@customer.Phone</td>
                    <td>@customer.Address</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => OpenEditCustomerModal(customer)">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isCustomerModalOpen)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Update Customer" : "Add Customer")</h5>
                    <button type="button" class="close" @onclick="CloseCustomerModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@customerModel" OnValidSubmit="SaveCustomer">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label>Firstname:</label>
                            <InputText @bind-Value="customerModel.FirstName" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Lastname:</label>
                            <InputText @bind-Value="customerModel.LastName" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Email:</label>
                            <InputText @bind-Value="customerModel.Email" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Phone:</label>
                            <InputText @bind-Value="customerModel.Phone" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Address:</label>
                            <InputText @bind-Value="customerModel.Address" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-primary">@(isEditMode ? "Update" : "Add Customer")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private IEnumerable<Customer> customers;
    private string searchQuery = string.Empty;
    private bool isCustomerModalOpen = false;
    private bool isEditMode = false;
    private Customer customerModel = new Customer();

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
    }

    private async Task SearchCustomerByEmail()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            customers = await CustomerService.GetCustomerByEmailAsync(searchQuery);
        }
        else
        {
            customers = await CustomerService.GetCustomersAsync();
        }
    }

    private async Task SaveCustomer()
    {
        if (isEditMode)
        {
            var customerId = customerModel.Id;
            await CustomerService.UpdateCustomerAsync(customerId, customerModel);
        }
        else
        {
            await CustomerService.AddCustomerAsync(customerModel);
        }
        customers = await CustomerService.GetCustomersAsync();
        CloseCustomerModal();
    }

    private async Task DeleteCustomer(int id)
    {
        await CustomerService.DeleteCustomerAsync(id);
        customers = await CustomerService.GetCustomersAsync();
    }

    private void OpenAddCustomerModal()
    {
        customerModel = new Customer();
        isEditMode = false;
        isCustomerModalOpen = true;
    }

    private void OpenEditCustomerModal(Customer customer)
    {
        customerModel = new Customer
            {
                Id = customer.Id,
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                Email = customer.Email,
                Phone = customer.Phone,
                Address = customer.Address
            };
        isEditMode = true;
        isCustomerModalOpen = true;
    }

    private void CloseCustomerModal() => isCustomerModalOpen = false;

}
