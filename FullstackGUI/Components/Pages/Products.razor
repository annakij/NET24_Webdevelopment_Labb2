@page "/products"
@using FullstackGUI.Services
@using FullstackGUI.Models
@rendermode InteractiveServer
@inject ProductService ProductService

<PageTitle>Alla produkter</PageTitle>


<h3>All products</h3>

<div class="d-flex justify-content-between mb-3">
    <div>
        <input @bind="searchQuery" class="form-control" placeholder="Search by name..." />
        <button class="btn btn-primary mt-2" @onclick="SearchProductByName">Search</button>
    </div>

    <div>
        <button class="btn btn-success mt-2" @onclick="OpenAddProductModal">Add new product</button>
    </div>
</div>

@if (products == null)
{
    <p>Loading products...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Brand</th>
                <th>Product</th>
                <th>Description</th>
                <th>Category</th>
                <th>Price</th>
                <th>Available</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Brand</td>
                    <td>@product.ProductName</td>
                    <td>@product.ProductDescription</td>
                    <td>@product.ProductCategory</td>
                    <td>@product.Price</td>
                    <td>@(product.IsInStock ? "Yes" : "No")</td>
                    <td>
                        <button class="btn btn-dark" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isAddProductModalOpen)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new product</h5>
                    <button type="button" class="close" @onclick="CloseAddProductModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newProduct" OnValidSubmit="AddProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label>Produkt Name</label>
                            <InputText @bind-Value="newProduct.ProductName" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Brand</label>
                            <InputText @bind-Value="newProduct.Brand" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <InputText @bind-Value="newProduct.ProductDescription" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Category</label>
                            <InputText @bind-Value="newProduct.ProductCategory" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Price</label>
                            <InputNumber @bind-Value="newProduct.Price" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Add in stock? </label>
                            <InputCheckbox @bind-Value="newProduct.IsInStock" />
                        </div>
                        <button type="submit" class="btn btn-success">Add</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    @code {
    private IEnumerable<Product> products;
    private string searchQuery = string.Empty;
    private bool isAddProductModalOpen = false;
    private Product newProduct = new Product();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task SearchProductByName()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            products = await ProductService.GetProductByNameAsync(searchQuery);
        }
        else
        {
            products = await ProductService.GetProductsAsync();
        }
    }

    private async Task AddProduct()
    {
        await ProductService.AddProductAsync(newProduct);
        newProduct = new Product(); 
        CloseAddProductModal();
        products = await ProductService.GetProductsAsync(); 
    }

    private void OpenAddProductModal()
    {
        isAddProductModalOpen = true;
    }

    private void CloseAddProductModal()
    {
        isAddProductModalOpen = false;
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        products = await ProductService.GetProductsAsync();
    }
}

}